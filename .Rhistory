devtools::build()
devtools::install()
devtools::check()
remove.packages("tinydancer")
devtools::install(".")
devtools::check()
devtools::check()
devtools::check()
remove.packages("tinydancer")
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
add_temperature_rung
devtools::check()
remove.packages("tinydancer")
devtools::build()
devtools::check()
devtools::check()
st1 <- rbind(c(0.000002, 0.000000875), c(0.000000875, 0.00025))
st2 <- rbind(c(0.00005, 0.000000825), c(0.000000825, 0.000002))
sdtiny <- function(x, m1=c(0,0), m2=c(5,4),
s1=st1, s2=st2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
ss1 <- rbind(c(0.0002, 0.0000875), c(0.0000875, 0.0025))
ss2 <- rbind(c(0.005, 0.0000825), c(0.0000825, 0.0002))
sdsmall <- function(x, m1=c(0,0), m2=c(5,4),
s1=ss1, s2=ss2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
sb1 <- rbind(c(0.002, 0.000875), c(0.000875, 0.025))
sb2 <- rbind(c(0.05, 0.000825), c(0.000825, 0.002))
sdbig <- function(x, m1=c(0,0), m2=c(5,4),
s1=sb1, s2=sb2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
implausibility <- function(x, targetLevel, levels=5, waves=3) {
ans <- rep(Inf, levels)
waveFail <- FALSE
this.level <- 1
wave.num <- 1
Timp <- NA
while ((this.level <= levels) & !waveFail) {
if (wave.num == 1) {
Timp <- sdbig(x)
} else if (wave.num == 2) {
Timp <- sdsmall(x)
} else {
Timp <- sdtiny(x)
}
wave.num <- wave.num + 1
if ((Timp > targetLevel[this.level]) & (wave.num <= waves)) {
waveFail <- TRUE
}
if ((!waveFail) & (wave.num > waves)) {
ans[this.level:levels] <- Timp
this.level <- levels + 1
} else {
ans[this.level] <- Timp
this.level <- this.level + 1
}
}
return(ans)
}
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2))
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2)),
debug_mode=FALSE
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2)),
debug_mode=FALSE
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
debug(parallel_slice)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
implausibility
debug(construct_temperature_ladder)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
implausibility(chain1_sample[3,],target_levels)
source("~/Dropbox/BayesExeter/tinydancer/R/parallel_slice.R")
source("~/Dropbox/BayesExeter/tinydancer/R/construct_temperature_ladder.R")
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
debug(parallel_slice)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
chain1_imp
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2)),
debug_mode=FALSE
)
st1 <- rbind(c(0.000002, 0.000000875), c(0.000000875, 0.00025))
st2 <- rbind(c(0.00005, 0.000000825), c(0.000000825, 0.000002))
sdtiny <- function(x, m1=c(0,0), m2=c(5,4),
s1=st1, s2=st2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
ss1 <- rbind(c(0.0002, 0.0000875), c(0.0000875, 0.0025))
ss2 <- rbind(c(0.005, 0.0000825), c(0.0000825, 0.0002))
sdsmall <- function(x, m1=c(0,0), m2=c(5,4),
s1=ss1, s2=ss2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
sb1 <- rbind(c(0.002, 0.000875), c(0.000875, 0.025))
sb2 <- rbind(c(0.05, 0.000825), c(0.000825, 0.002))
sdbig <- function(x, m1=c(0,0), m2=c(5,4),
s1=sb1, s2=sb2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
implausibility <- function(x, targetLevel, levels=5, waves=3) {
ans <- rep(Inf, levels)
waveFail <- FALSE
this.level <- 1
wave.num <- 1
Timp <- NA
while ((this.level <= levels) & !waveFail) {
if (wave.num == 1) {
Timp <- sdbig(x)
} else if (wave.num == 2) {
Timp <- sdsmall(x)
} else {
Timp <- sdtiny(x)
}
wave.num <- wave.num + 1
if ((Timp > targetLevel[this.level]) & (wave.num <= waves)) {
waveFail <- TRUE
}
if ((!waveFail) & (wave.num > waves)) {
ans[this.level:levels] <- Timp
this.level <- levels + 1
} else {
ans[this.level] <- Timp
this.level <- this.level + 1
}
}
return(ans)
}
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2)),
debug_mode=FALSE
)
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2)),
debug_mode=TRUE
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
debug(one_slice)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
debug(slice_sampler_core)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
log_dens()
log_dens
#' # Define parameters
#' x <- c(0.2, 0.3)
#' this_levels <- c(0.3, 0.7)
#' final_levels <- c(0.3, 0.7)
#' box_limits <- matrix(c(0, 1, 0, 1), ncol = 2)
#'
#' # Calculate log density
#' result <- log_dens(x, this_levels, final_levels, box_limits, implausibility)
#' print(result)
#' @export
log_dens <- function(x, this_levels, final_levels, implausibility = implausibility) {
timp <- implausibility(x, final_levels)
ifelse(all(timp <= this_levels), 1, -Inf)
}
log_dens
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
f
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
source("~/Dropbox/BayesExeter/tinydancer/R/slice_sampler_core.R")
source("~/Dropbox/BayesExeter/tinydancer/R/parallel_slice.R")
source("~/Dropbox/BayesExeter/tinydancer/R/construct_temperature_ladder.R")
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
#' # Define parameters
#' x <- c(0.2, 0.3)
#' this_levels <- c(0.3, 0.7)
#' final_levels <- c(0.3, 0.7)
#' box_limits <- matrix(c(0, 1, 0, 1), ncol = 2)
#'
#' # Calculate log density
#' result <- log_dens(x, this_levels, final_levels, box_limits, implausibility)
#' print(result)
#' @export
log_dens <- function(x, this_levels, final_levels, implausibility) {
timp <- implausibility(x, final_levels)
ifelse(all(timp <= this_levels), 1, -Inf)
}
#' # Define parameters
#' x <- c(0.2, 0.3)
#' this_levels <- c(0.3, 0.7)
#' final_levels <- c(0.3, 0.7)
#' box_limits <- matrix(c(0, 1, 0, 1), ncol = 2)
#'
#' # Calculate log density
#' result <- log_dens(x, this_levels, final_levels, box_limits, implausibility)
#' print(result)
#' @export
log_dens <- function(x, this_levels, final_levels, implausibility) {
timp <- implausibility(x, final_levels)
ifelse(all(timp <= this_levels), 1, -Inf)
}
source("~/Dropbox/BayesExeter/tinydancer/R/parallel_slice.R")
source("~/Dropbox/BayesExeter/tinydancer/R/slice_sampler_core.R")
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
devtools::check()
devtools::check()
devtools::check()
st1 <- rbind(c(0.000002, 0.000000875), c(0.000000875, 0.00025))
st2 <- rbind(c(0.00005, 0.000000825), c(0.000000825, 0.000002))
sdtiny <- function(x, m1=c(0,0), m2=c(5,4),
s1=st1, s2=st2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
implausibility <- function(x, target_level=3) {
sdtiny(x)
}
control_list <- list(
box_limits = cbind(rep(-3, 2), rep(7, 2)),
num_mutations = 8,
num_iterations = 100
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = 3,
control_list = control_list
)
control_list <- list(
box_limits = cbind(rep(-3, 2), rep(7, 2)),
num_mutations = 8,
num_iterations = 100
debug_mode=FALSE
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = 3,
control_list = control_list
)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
rm(list = c("construct_temperature_ladder", "log_dens",
"slice_sampler_core", "slice_sampler_core_once"))
devtools::check()
rm(list=ls())
devtools::load_all()
st1 <- rbind(c(0.000002, 0.000000875), c(0.000000875, 0.00025))
st2 <- rbind(c(0.00005, 0.000000825), c(0.000000825, 0.000002))
sdtiny <- function(x, m1=c(0,0), m2=c(5,4),
s1=st1, s2=st2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
ss1 <- rbind(c(0.0002, 0.0000875), c(0.0000875, 0.0025))
ss2 <- rbind(c(0.005, 0.0000825), c(0.0000825, 0.0002))
sdsmall <- function(x, m1=c(0,0), m2=c(5,4),
s1=ss1, s2=ss2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
sb1 <- rbind(c(0.002, 0.000875), c(0.000875, 0.025))
sb2 <- rbind(c(0.05, 0.000825), c(0.000825, 0.002))
sdbig <- function(x, m1=c(0,0), m2=c(5,4),
s1=sb1, s2=sb2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
implausibility <- function(x, targetLevel, levels=5, waves=3) {
ans <- rep(Inf, levels)
waveFail <- FALSE
this.level <- 1
wave.num <- 1
Timp <- NA
while ((this.level <= levels) & !waveFail) {
if (wave.num == 1) {
Timp <- sdbig(x)
} else if (wave.num == 2) {
Timp <- sdsmall(x)
} else {
Timp <- sdtiny(x)
}
wave.num <- wave.num + 1
if ((Timp > targetLevel[this.level]) & (wave.num <= waves)) {
waveFail <- TRUE
}
if ((!waveFail) & (wave.num > waves)) {
ans[this.level:levels] <- Timp
this.level <- levels + 1
} else {
ans[this.level] <- Timp
this.level <- this.level + 1
}
}
return(ans)
}
control_list <- list(
num_mutations = 8,
num_iterations = 100,
box_limits = cbind(rep(-3, 2), rep(7, 2)),
debug_mode=TRUE
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = c(3, 3, 3, 2.5, 2),
control_list = control_list
)
st1 <- rbind(c(0.000002, 0.000000875), c(0.000000875, 0.00025))
st2 <- rbind(c(0.00005, 0.000000825), c(0.000000825, 0.000002))
sdtiny <- function(x, m1=c(0,0), m2=c(5,4),
s1=st1, s2=st2) {
coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
sdevs1 <- sqrt(t(x - m1) %*% s1inv %*% (x - m1))
sdevs2 <- sqrt(t(x - m2) %*% s2inv %*% (x - m2))
return(min(sdevs1, sdevs2))
}
implausibility <- function(x, target_level=3) {
sdtiny(x)
}
control_list <- list(
box_limits = cbind(rep(-3, 2), rep(7, 2)),
num_mutations = 8,
num_iterations = 100
debug_mode=FALSE
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = 3,
control_list = control_list
)
control_list <- list(
box_limits = cbind(rep(-3, 2), rep(7, 2)),
num_mutations = 8,
num_iterations = 100,
debug_mode=FALSE
)
new_ladder <- construct_temperature_ladder(
implausibility = implausibility,
dims = 2,
target_levels = 3,
control_list = control_list
)
fast_samples <- subset_sim_slice_partitioned(implausibility, dims=2, target_levels = 3, control_list=list(debug_mode=FALSE, num_mutations=40, num_iterations=100, box_limits=cbind(rep(-3,2),rep(7,2))), n_partitions = 2)
