% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_slice_ptmcmc.R
\name{sample_slice_ptmcmc}
\alias{sample_slice_ptmcmc}
\title{Perform Parallel Tempering MCMC Slice Sampling for uniform target regions}
\usage{
sample_slice_ptmcmc(
  sampler,
  n_iter = 1000,
  control_list = list(),
  implausibility
)
}
\arguments{
\item{sampler}{A list returned by \code{construct_temperature_ladder}, containing the implausibility levels
(\code{imp_levels}), starting points (\code{x_starts}), and control parameters (\code{control_list}).}

\item{n_iter}{Integer. Number of iterations for the sampler. Default is 1000.}

\item{control_list}{List. A list of control parameters that can override the settings in \code{sampler$control_list}.
Available options include:
\itemize{
\item \code{num_mutations}: Number of mutations per iteration.
\item \code{debug_mode}: Logical, whether to enable debug mode.
\item \code{print_every}: Number of iterations between progress messages.
}}

\item{implausibility}{A user-defined function that calculates the implausibility
of a point given the required levels. (see main examples)}
}
\value{
A list containing samples from the Parallel Tempering MCMC slice sampler.
}
\description{
This function performs uniform sampling in the specified space using Parallel Tempering MCMC with slice sampling.
It utilizes the temperature ladder constructed by the provided sampler object.
}
\examples{
# Example usage
st1 <- rbind(c(0.000002, 0.000000875), c(0.000000875, 0.00025))
st2 <- rbind(c(0.00005, 0.000000825), c(0.000000825, 0.000002))
sdtiny <- function(x, m1=c(0,0), m2=c(5,4),
                   s1=st1, s2=st2) {
  coef1 <- (1 / ((s1[2, 2] * s1[1, 1]) - (s1[2, 1] * s1[1, 2])))
  s1inv <- coef1 * rbind(c(s1[2, 2], -s1[1, 2]), c(-s1[2, 1], s1[1, 1]))
  coef2 <- (1 / ((s2[2, 2] * s2[1, 1]) - (s2[2, 1] * s2[1, 2])))
  s2inv <- coef2 * rbind(c(s2[2, 2], -s2[1, 2]), c(-s2[2, 1], s2[1, 1]))
  sdevs1 <- sqrt(t(x - m1) \%*\% s1inv \%*\% (x - m1))
  sdevs2 <- sqrt(t(x - m2) \%*\% s2inv \%*\% (x - m2))
  return(min(sdevs1, sdevs2))
}
implausibility <- function(x, target_level=3) {
  sdtiny(x)
}
control_list <- list(
  box_limits = cbind(rep(-3, 2), rep(7, 2)),
  num_mutations = 8,
  num_iterations = 100
)
new_ladder <- construct_temperature_ladder(
  implausibility = implausibility,
  dims = 2,
  target_levels = 3,
  control_list = control_list
)
result <- sample_slice_ptmcmc(new_ladder, n_iter = 1000, implausibility=implausibility)
}
